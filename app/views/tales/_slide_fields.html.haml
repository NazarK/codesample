.nested-fields.well.padding.slide{data: {slide_id: f.object.id}}
  .row
    = f.hidden_field :id
    = f.hidden_field :position
    .col-sm-1
      %i.sort-handle.cursor-move.color-gray.fa.fa-sort.fa-2x{"aria-hidden" => "true", title: "drag to reorder"}
      = link_to_remove_association "<i class='fa fa-2x fa-remove color-red margin-top-sm'></i>".html_safe, f, data: { confirmation: "Delete slide?"}
    .col-sm-5
      = f.input :caption, input_html: { style: "vertical-align:top;width:90%;", rows: 14}
    .col-sm-6
      .row
        .col-sm-5
          = f.input :image, input_html: { style: "margin:0"}
          - if f.object.image.present?
            .row
              %a{href: f.object.image.url(:crop), target: "_blank",style:"cursor:pointer;"}
                = image_tag f.object.image.url(:thumb), style: "height:60px;"
        .col-sm-7
          = f.input :audio, label: "Image Audio", input_html: { accept: "audio/*" }
          - if f.object.audio.present?
            .row
              = audio_tag f.object.audio.url,
                { controls: true,
                  onvolumechange: "slide_vol_change.apply(this)",
                  onloadedmetadata: "this.volume = #{f.object.audio_vol}"  }
            .row.col-sm-12
              = f.input :delete_audio, as: :boolean, label: "delete audio"
      .row
        .col-sm-7
          = f.input :youtube_video_link, label: "or Youtube Video Link"
        .col-sm-2.col-sm-offset-1
          = f.input :youtube_video_start, label: "Start", input_html: { value: (Time.at(f.object.youtube_video_start.to_i).utc.strftime("%M:%S") if f.object.youtube_video_start.present?), placeholder: "min:sec"  }
        .col-sm-2
          = f.input :youtube_video_end, label: "End", input_html: { value: (Time.at(f.object.youtube_video_end.to_i).utc.strftime("%M:%S") if f.object.youtube_video_end.present?), placeholder: "min:sec" }
          
        - if f.object.youtube_video_link.present?
          .col-sm-12.row.youtube_thumb
            = react_component "YoutubeThumb", videoId: f.object.youtube_video_id
            %span{style: "vertical-align:top"}
              = Time.at(f.object.media_duration).utc.strftime("%M:%S") rescue ''
      .row
        .col-sm-12
          = f.input :video, label: "or Video", input_html: { accept: "video/*" }
          - if f.object.video.present?
            .row
              = video_tag f.object.video.url,
                  { controls: true, style: "height:120px",
                    ontimeupdate: "slide_video_pos_change.apply(this)",
                    onvolumechange: "slide_vol_change.apply(this)",
                    onloadedmetadata: "this.currentTime = #{f.object.video_thumb_pos}; this.volume = #{f.object.audio_vol}"}
      .row
        .col-sm-12
          .pull-right
            = f.input :mute_background_audio, label: "mute tale background audio"
      
      
      = f.hidden_field :video_thumb_pos, class: "video_thumb_pos"
      = f.hidden_field :audio_vol, class: "audio_vol"
